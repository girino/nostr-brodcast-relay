name: Release Binaries

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          # Create release directory
          mkdir -p release
          
          # Build for multiple platforms
          echo "Building Linux AMD64..."
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o release/broadcast-relay-linux-amd64
          
          echo "Building Linux ARM64..."
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o release/broadcast-relay-linux-arm64
          
          echo "Building macOS AMD64..."
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o release/broadcast-relay-darwin-amd64
          
          echo "Building macOS ARM64 (Apple Silicon)..."
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o release/broadcast-relay-darwin-arm64
          
          echo "Building Windows AMD64..."
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o release/broadcast-relay-windows-amd64.exe

      - name: Generate checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Create release notes
        id: release_notes
        run: |
          # Extract changelog for this version
          VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "Creating release notes for v${VERSION}..."
          
          # Create basic release notes
          cat > release_notes.md << 'EOF'
          ## Broadcast Relay v${{ steps.get_version.outputs.VERSION }}
          
          A high-performance Nostr relay that broadcasts events to the best relays in the network.
          
          ### Installation
          
          Download the appropriate binary for your platform below, make it executable, and run:
          
          ```bash
          chmod +x broadcast-relay-*
          ./broadcast-relay-*
          ```
          
          Or use Docker:
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
          ```
          
          ### Verify Downloads
          
          Verify checksums after downloading:
          ```bash
          sha256sum -c checksums.txt
          ```
          
          See [CHANGELOG.md](https://gitworkshop.dev/girino@girino.org/broadcast-relay/blob/main/CHANGELOG.md) for detailed changes.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Broadcast Relay v${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.get_version.outputs.VERSION }}
          path: release/*
          retention-days: 90

